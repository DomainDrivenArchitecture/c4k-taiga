apiVersion: apps/v1
kind: Deployment
metadata:
  name: taiga-deployment
  labels:
    app.kubernetes.part-of: c4k-taiga
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taiga
  template: 
    metadata:
      labels:
        app: taiga
    spec:
      initContainers:
      - name: taiga-manage
        image: taigaio/taiga-back:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        command: ["async_entrypoint.sh"]
        volumeMounts:
        - name: taiga-static
          mountPath: /taiga-back/static
          readOnly: false
        - name: taiga-media
          mountPath: /taiga-back/media
          readOnly: false
        envFrom:
        - configMapRef:
          name: taiga-back-configmap
        - secretRef:
          name: taiga-back-secret
        - secretRef:
          name: taiga-rabbitmq-secret
        env:
        - name: POSTGRES_USER # ToDo: does taiga need a specific postgres version?
          valueFrom: # ToDo: which env vars are needed by taiga-back and taiga-async
            secretKeyRef: # ToDo: If all env vars are needed by taiga-back a config-map would be suitable
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: postgres-db
        - name: POSTGRES_HOST
          value: "postgresql-service"
        - name: POSTGRES_PORT
          value: 5432
        - name: CELERY_ENABLED
          value: false
      containers:
      - name: taiga-back
        image: taigaio/taiga-back:latest 
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: taiga-static
          mountPath: /taiga-back/static
          readOnly: false
        - name: taiga-media
          mountPath: /taiga-back/media
          readOnly: false
        envFrom:
        - configMapRef:
            name: taiga-back-configmap
        - secretRef:
            name: taiga-back-secret
        env: # ToDo: Does every container need access to all env vars? 
        - name: POSTGRES_USER # ToDo: does taiga need a specific postgres version?
          valueFrom: # ToDo: which env vars are needed by taiga-back and taiga-async
            secretKeyRef: # ToDo: If all env vars are needed by taiga-back a config-map would be suitable
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: postgres-db
        - name: POSTGRES_HOST
          value: "postgresql-service"
        - name: POSTGRES_PORT
          value: 5432
      - name: taiga-async
        image: taigaio/taiga-back:latest 
        imagePullPolicy: IfNotPresent
        command: ["async_entrypoint.sh"]
        ports:
        - containerPort: 80
        volumeMounts:
        - name: taiga-static
          mountPath: /taiga-back/static
          readOnly: false
        - name: taiga-media
          mountPath: /taiga-back/media
          readOnly: false
        envFrom:
        - configMapRef:
            name: taiga-back-configmap
        - secretRef:
            name: taiga-back-secret
        env:
          - name: POSTGRES_USER 
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: postgres-user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: postgres-password
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: postgres-config
                key: postgres-db
          - name: POSTGRES_HOST
            value: "postgresql-service"
          - name: POSTGRES_PORT
            value: 5432
      - name: taiga-async-rabbitmq  # ToDo: Rabbitmq uses a hostname KW in docker-compose. Whats the equivalent expression in kubernetes?
        image: rabbitmq:3.8-management-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: taiga-async-rabbitmq-data
          mountPath: /var/lib/rabbitmq
          readOnly: false
        envFrom:
        - secretRef:
            name: taiga-rabbitmq-secret
        env:
        - name: RABBITMQ_ERLANG_COOKIE
          value: ERLANG_COOKIE_VALUE
        - name: RABBITMQ_DEFAULT_VHOST
          value: RABBITMQ_VHOST
      - name: taiga-front
        image: taigaio/taiga-front:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: TAIGA_URL
          value: TAGA_SCHEME://TAIGA_DOMAIN
        - name: TAIGA_WEBSOCKETS_URL
          value: WEBSOCKETS_SCHEME://TAIGA_DOMAIN
        - name: TAIGA_SUBPATH
          value: SUBPATH
      - name: taiga-events
        image: taigaio/taiga-events:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: RABBITMQ_USER
          value: RABBITMQ_USER_VALUE
        - name: RABBITMQ_PASS
          value: RABBITMQ_PASS_VALUE
        - name: TAIGA_SECRET_KEY
          value: SECRET_KEY_VALUE
      - name: taiga-events-rabbitmq  # ToDo: Rabbitmq uses a hostname KW in docker-compose. Whats the equivalent expression in kubernetes?
        image: rabbitmq:3.8-management-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: taiga-events-rabbitmq-data
          mountPath: /var/lib/rabbitmq
          readOnly: false
        env:
        - name: RABBITMQ_ERLANG_COOKIE
          value: ERLANG_COOKIE_VALUE
        - name: RABBITMQ_DEFAULT_USER
          value: RABBITMQ_USER
        - name: RABBITMQ_DEFAULT_PASS
          value: RABBITMQ_PASS
        - name: RABBITMQ_DEFAULT_VHOST
          value: RABBITMQ_VHOST
      - name: taiga-protected
        image: taigaio/taiga-protected:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: MAX_AGE
          value: ATTACHMENTS_MAX_AGE
        - name: SECRET_KEY
          value: SECRET_KEY_VALUE
#     - name: taiga-gateway # ToDo: How to replace the gateway in this setup?
      
      volumes:
        - name: taiga-static
          persistentVolumeClaim:
            claimName: taiga-static
        - name: taiga-media
          persistentVolumeClaim:
            claimName: taiga-media
        - name: taiga-async-rabbitmq-data
          persistentVolumeClaim:
            claimName: taiga-async-rabbitmq-data
        - name: taiga-events-rabbitmq-data
          persistentVolumeClaim:
            claimName: taiga-events-rabbitmq-data


x-environment:
  &default-back-environment
  # These environment variables will be used by taiga-back and taiga-async.
  # Database settings
  POSTGRES_DB: "taiga"
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  POSTGRES_HOST: "taiga-db"
  # Taiga settings
  TAIGA_SECRET_KEY: "${SECRET_KEY}"
  TAIGA_SITES_SCHEME: "${TAIGA_SCHEME}"
  TAIGA_SITES_DOMAIN: "${TAIGA_DOMAIN}"
  TAIGA_SUBPATH: "${SUBPATH}"
  # Email settings.
  EMAIL_BACKEND: "django.core.mail.backends.${EMAIL_BACKEND}.EmailBackend"
  DEFAULT_FROM_EMAIL: "${EMAIL_DEFAULT_FROM}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_USE_SSL: "${EMAIL_USE_SSL}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"
  # Rabbitmq settings
  RABBITMQ_USER: "${RABBITMQ_USER}"
  RABBITMQ_PASS: "${RABBITMQ_PASS}"
  # Telemetry settings
  ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"
  # ...your customizations go here

x-volumes:
  &default-back-volumes
  # These volumens will be used by taiga-back and taiga-async.
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py

services:
  taiga-db:
    image: postgres:12.3
    environment:
      POSTGRES_DB: "taiga"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
    networks:
      - taiga

  taiga-back:
    image: taigaio/taiga-back:latest
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_healthy
      taiga-async-rabbitmq:
        condition: service_healthy

  taiga-async:
    image: taigaio/taiga-back:latest
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_healthy
      taiga-async-rabbitmq:
        condition: service_healthy

  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-async-rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-front:
    image: taigaio/taiga-front:latest
    environment:
      TAIGA_URL: "${TAIGA_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_WEBSOCKETS_URL: "${WEBSOCKETS_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_SUBPATH: "${SUBPATH}"
      # ...your customizations go here
    networks:
      - taiga
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:latest
    environment:
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASS: "${RABBITMQ_PASS}"
      TAIGA_SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga
    depends_on:
      taiga-events-rabbitmq:
        condition: service_healthy

  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-events-rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-protected:
    image: taigaio/taiga-protected:latest
    environment:
      MAX_AGE: "${ATTACHMENTS_MAX_AGE}"
      SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga

  taiga-gateway:
    image: nginx:1.19-alpine
    ports:
      - "9000:80"
    volumes:
      - ./taiga-gateway/taiga.conf:/etc/nginx/conf.d/default.conf
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
    networks:
      - taiga
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events

volumes:
  taiga-static-data:
  taiga-media-data:
  taiga-db-data:
  taiga-async-rabbitmq-data:
  taiga-events-rabbitmq-data:

networks:
  taiga:
